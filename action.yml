name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
    default: ${{ github.token }}
  initial_version:
    description: 'Initial version to use if no previous version is found'
    required: false
    default: '0.0.0'
  draft:
    description: 'Create release as draft'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
outputs:
  new_version:
    description: 'The new version number'
    value: ${{ env.NEW_VERSION }}
 
runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: get-initial-version
      run: |
        # Use provided initial version or default
        INITIAL_VERSION="${{ inputs.initial_version }}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV
        echo "Using initial version: $INITIAL_VERSION"
 
    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        CURRENT_VERSION="${INITIAL_VERSION}"
        echo "Processing PR title: $PR_TITLE"
        
        # First check for breaking changes (MAJOR version bump)
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_VERSION="$((MAJOR + 1)).0.0"
          echo "BUMP=major" >> $GITHUB_ENV
        # Then check for features (MINOR version bump)
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          echo "BUMP=minor" >> $GITHUB_ENV
        # Then check for fixes (PATCH version bump)
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          NEW_VERSION="$CURRENT_VERSION"
          echo "BUMP=none" >> $GITHUB_ENV
        fi
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Determined new version: $NEW_VERSION"
 
    - name: Update version file
      if: env.BUMP != 'none'
      shell: bash
      run: |
        # Update .version file with new version
        echo "$NEW_VERSION" > .version
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Commit and push the version file
        git add .version
        git commit -m "Bump version to $NEW_VERSION"
        git push
 
    - name: Create GitHub Release
      if: env.BUMP != 'none'
      shell: bash
      run: |
        # Create GitHub release
        gh release create "v$NEW_VERSION" \
          --title "Release v$NEW_VERSION" \
          --notes "Automated release based on PR title" \
          ${{ inputs.draft == 'true' && '--draft' || '' }} \
          ${{ inputs.prerelease == 'true' && '--prerelease' || '' }}
      env:
        GH_TOKEN: ${{ inputs.token }}
