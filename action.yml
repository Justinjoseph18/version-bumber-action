name: "Version Bumper & Release Notes"

on:
  pull_request:
    types:
      - closed
    branches:
      - main  # Adjust this based on your default branch

jobs:
  bump-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get initial version
        id: initial-version
        run: |
          INITIAL_VERSION=$(git describe --tags --abbrev=0 || echo "0.0.0")
          echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV

      - name: Determine version bump
        id: version-bump
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
            BUMP="major"
          elif [[ $PR_TITLE =~ ^feat: ]]; then
            BUMP="minor"
          elif [[ $PR_TITLE =~ ^fix: ]]; then
            BUMP="patch"
          else
            BUMP="none"
          fi
          
          echo "BUMP=$BUMP" >> $GITHUB_ENV
          echo "Version bump type: $BUMP"

      - name: Bump version and create tag
        id: bump-version
        run: |
          CURRENT_VERSION="${INITIAL_VERSION}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          case $BUMP in
            major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
            minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
            patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
            none) NEW_VERSION="${CURRENT_VERSION}" ;;
          esac

          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          if [[ "$BUMP" != "none" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
            git push origin "v${NEW_VERSION}"
          fi

      - name: Extract Release Notes
        id: extract-release-notes
        run: |
          if [[ "$BUMP" != "none" ]]; then
            RELEASE_NOTES=$(awk '/^## /{if (found) exit; found=1; next} found' CHANGELOG.md)

            if [[ -z "$RELEASE_NOTES" ]]; then
              RELEASE_NOTES="No specific release notes provided."
            fi

            echo "release_notes<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        if: env.BUMP != 'none'
        run: |
          gh release create "v${NEW_VERSION}" \
            --title "Release v${NEW_VERSION}" \
            --notes "${{ env.release_notes }}" \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
