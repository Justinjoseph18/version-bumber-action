name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
    default: ${{ github.token }}
  initial_version:
    description: 'Initial version to use if no previous version is found'
    required: false
    default: '0.0.0'
 
runs:
  using: 'composite'
  steps:
    - name: Get current version
      shell: bash
      id: get-current-version
      run: |
        # Prioritize initial version input
        INITIAL_VERSION="${{ inputs.initial_version }}"
        
        # Check if .version file exists, use it if present
        if [ -f .version ]; then
          FILE_VERSION=$(cat .version)
        fi
        
        # Determine which version to use
        if [ ! -z "$FILE_VERSION" ]; then
          CURRENT_VERSION="$FILE_VERSION"
        else
          CURRENT_VERSION="$INITIAL_VERSION"
        fi
        
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "Using current version: $CURRENT_VERSION"
 
    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "Processing PR title: $PR_TITLE"
        
        # First check for breaking changes (MAJOR version bump)
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_VERSION="$((MAJOR + 1)).0.0"
          echo "BUMP=major" >> $GITHUB_ENV
        # Then check for features (MINOR version bump)
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          echo "BUMP=minor" >> $GITHUB_ENV
        # Then check for fixes (PATCH version bump)
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          NEW_VERSION="$CURRENT_VERSION"
          echo "BUMP=none" >> $GITHUB_ENV
        fi
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Determined new version: $NEW_VERSION"
 
    - name: Update version file
      if: env.BUMP != 'none'
      shell: bash
      run: |
        # Update .version file with new version
        echo "$NEW_VERSION" > .version
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Commit and push the version file
        git add .version
        git commit -m "Bump version to $NEW_VERSION"
        git push
 
    - name: Update GitHub Secret
      if: env.BUMP != 'none'
      env:
        GH_TOKEN: ${{ inputs.token }}
      shell: bash
      run: |
        # Get the public key for secret encryption
        PUBLIC_KEY_RESPONSE=$(gh api /repos/${{ github.repository }}/actions/secrets/public-key)
        PUBLIC_KEY=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r .key)
        KEY_ID=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r .key_id)
        
        # Encrypt the new version
        ENCRYPTED_VALUE=$(echo -n "$NEW_VERSION" | base64 | xargs -0 python3 -c "
import base64
import nacl
import nacl.encoding
import nacl.public

public_key = '$PUBLIC_KEY'
message = '$NEW_VERSION'

public_key = nacl.public.PublicKey(base64.b64decode(public_key), nacl.encoding.Base64Encoder())
sealed_box = nacl.public.SealedBox(public_key)
encrypted = sealed_box.encrypt(message.encode('utf-8'))
print(base64.b64encode(encrypted).decode('utf-8'))
")
        
        # Update the secret
        gh api --method PUT \
          -H "Accept: application/vnd.github+json" \
          /repos/${{ github.repository }}/actions/secrets/INITIAL_VERSION \
          -f encrypted_value="$ENCRYPTED_VALUE" \
          -f key_id="$KEY_ID"
 
    - name: Create GitHub Release
      if: env.BUMP != 'none'
      shell: bash
      run: |
        # Check if release already exists
        EXISTING_RELEASE=$(gh release list --json tagName --jq ".[] | select(.tagName == \"v$NEW_VERSION\")")
        
        if [ -z "$EXISTING_RELEASE" ]; then
          # Create GitHub release only if it doesn't exist
          gh release create "v$NEW_VERSION" \
            --title "Release v$NEW_VERSION" \
            --notes "Automated release based on PR title"
        else
          echo "Release v$NEW_VERSION already exists. Skipping release creation."
        fi
      env:
        GH_TOKEN: ${{ inputs.token }}
