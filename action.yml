name: 'Automatic Version Bumper'
description: 'Automatically bumps version and updates GitHub Secrets'
inputs:
  token:
    description: 'GitHub token for authentication'
    required: true
  initial_version:
    description: 'Initial version from GitHub secrets'
    required: true
outputs:
  new_version:
    description: 'The new version number'
    value: ${{ env.NEW_VERSION }}

runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: get-initial-version
      run: |
        VERSION="${{ inputs.initial_version }}"
        echo "LATEST_TAG=$VERSION" >> $GITHUB_ENV
        echo "Initial version: $VERSION"

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "Processing PR title: $PR_TITLE"

        # Determine bump type
        if [[ $PR_TITLE =~ ^feat! ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi

        echo "Determined bump type: $BUMP"

    - name: Bump version and create tag
      if: env.BUMP != 'none'
      shell: bash
      id: bump-version
      run: |
        echo "Starting version bump process..."
        CURRENT_VERSION=${LATEST_TAG}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        case $BUMP in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
        esac

        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Calculated new version: $NEW_VERSION"

        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin refs/tags/v$NEW_VERSION --force

    - name: Update GitHub Secret with New Version
      shell: bash
      run: |
        echo "Updating GitHub Secret with new version: $NEW_VERSION"
        gh secret set INITIAL_VERSION --body "$NEW_VERSION" --repo $GITHUB_REPOSITORY
      env:
        GH_TOKEN: ${{ inputs.token }}
