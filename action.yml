name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
  changelog_file:
    description: 'Path to the CHANGELOG file'
    required: false
    default: 'CHANGELOG.md'
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'
outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}
runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        INITIAL_VERSION="${{ inputs.initial_version }}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi

    - name: Bump version
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
          patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          none) NEW_VERSION="${CURRENT_VERSION}" ;;
        esac
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Extract Release Notes
      shell: bash
      id: extract-notes
      run: |
        VERSION="v${{ steps.bump-version.outputs.version }}"
        CHANGELOG_FILE="${{ inputs.changelog_file }}"
        
        if [ ! -f "$CHANGELOG_FILE" ]; then
          echo "Error: Changelog file not found at $CHANGELOG_FILE"
          exit 1
        fi

        # Find the start of the current version's notes
        START_LINE=$(grep -n "^## $VERSION" "$CHANGELOG_FILE" | cut -d ':' -f 1)
        
        if [ -z "$START_LINE" ]; then
          echo "Error: Could not find release notes for version $VERSION"
          exit 1
        fi

        # Find the next version header or EOF
        NEXT_VERSION_LINE=$(tail -n +$((START_LINE + 1)) "$CHANGELOG_FILE" | grep -n "^## " | head -1 | cut -d ':' -f 1)
        
        if [ -n "$NEXT_VERSION_LINE" ]; then
          # If there's a next version, extract until that line
          RELEASE_NOTES=$(tail -n +$((START_LINE + 1)) "$CHANGELOG_FILE" | head -n $((NEXT_VERSION_LINE - 1)))
        else
          # If this is the latest version, extract until the end
          RELEASE_NOTES=$(tail -n +$((START_LINE + 1)) "$CHANGELOG_FILE"))
        fi

        # Clean up the notes
        CLEAN_NOTES=$(echo "$RELEASE_NOTES" | sed '/./,$!d' | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}')
        
        # Create multiline output
        {
          echo "notes<<EOF"
          echo "$CLEAN_NOTES"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Create Release
      if: env.BUMP != 'none'
      shell: bash
      run: |
        TAG="v${{ steps.bump-version.outputs.version }}"
        
        # Create the release using GitHub CLI
        gh release create "$TAG" \
          --title "$TAG" \
          --notes "${{ steps.extract-notes.outputs.notes }}" \
          --draft=false \
          --prerelease=false
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GH_TOKEN: ${{ inputs.token }}
