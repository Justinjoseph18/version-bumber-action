name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'
  changelog_path:
    description: 'Path to CHANGELOG.md file'
    required: false
    default: 'CHANGELOG.md'
outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}
runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        INITIAL_VERSION="${{ inputs.initial_version }}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi

    - name: Extract release notes
      shell: bash
      id: extract-notes
      run: |
        CHANGELOG_PATH="${{ inputs.changelog_path }}"
        if [ ! -f "$CHANGELOG_PATH" ]; then
          echo "WARNING: Changelog file not found at $CHANGELOG_PATH"
          echo "release_notes=No changelog entry found." >> $GITHUB_OUTPUT
          exit 0
        fi

        # Function to extract version block from changelog
        extract_version_block() {
          local version=$1
          local in_block=false
          local block=""
          
          while IFS= read -r line; do
            if [[ $line =~ ^##[[:space:]]*\[?${version}\]? ]]; then
              in_block=true
              continue
            elif [[ $in_block == true && $line =~ ^##[[:space:]] ]]; then
              break
            elif [[ $in_block == true ]]; then
              block="${block}${line}\n"
            fi
          done < "$CHANGELOG_PATH"
          
          echo -e "$block" | sed '/^$/d'
        }

        # Set as environment variable for use in next step
        RELEASE_NOTES=$(extract_version_block "$NEW_VERSION")
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Bump version and create tag
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
          patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          none) NEW_VERSION="${CURRENT_VERSION}" ;;
        esac
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        
        if [ "$BUMP" != "none" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create tag with release notes
          RELEASE_NOTES="${{ steps.extract-notes.outputs.release_notes }}"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}" -m "$RELEASE_NOTES"
          git push origin "v${NEW_VERSION}" --force
        fi
