name: 'Automatic Version Bumper'
description: 'Automatically bumps version, updates changelog, and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'
outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}
runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        INITIAL_VERSION="${{ inputs.initial_version }}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi

    - name: Update Changelog
      shell: bash
      id: update-changelog
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        PR_URL="${{ github.event.pull_request.html_url }}"
        PR_AUTHOR="${{ github.event.pull_request.user.login }}"
        DATE=$(date +%Y-%m-%d)
        
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        if [ "$BUMP" != "none" ]; then
          CURRENT_VERSION="${{ inputs.initial_version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case $BUMP in
            major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
            minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
            patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          esac
          
          CHANGELOG_ENTRY="## [v${NEW_VERSION}] - ${DATE}\n"
          CHANGELOG_ENTRY+="### Changes\n"
          CHANGELOG_ENTRY+="- ${PR_TITLE} ([#${PR_NUMBER}](${PR_URL})) by @${PR_AUTHOR}\n\n"
          
          echo -e "$CHANGELOG_ENTRY$(cat CHANGELOG.md)" > CHANGELOG.md
          
          git add CHANGELOG.md
          git commit -m "docs: update changelog for v${NEW_VERSION}"
        fi
        
        CHANGELOG_CONTENT=$(cat CHANGELOG.md)
        echo "changelog<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Bump version and create tag
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
          patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          none) NEW_VERSION="${CURRENT_VERSION}" ;;
        esac
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        
        if [ "$BUMP" != "none" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag with changelog content
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}" -m "${{ env.changelog }}"
          git push origin "v${NEW_VERSION}" --force
        fi
