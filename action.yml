name: 'Automatic Version and Release Notes'
description: 'Automatically bumps version, creates releases, and adds changelog notes based on PR conventions'
 
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
    default: ${{ github.token }}
  draft:
    description: 'Create release as draft'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
  changelog_file:
    description: 'Path to changelog file'
    required: false
    default: 'CHANGELOG.md'
 
runs:
  using: 'composite'
  steps:
    - name: Get version from package.json
      shell: bash
      id: package-version
      run: |
        if [ -f package.json ]; then
          VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=v${VERSION}" >> $GITHUB_ENV
        fi
      continue-on-error: true
 
    - name: Get version from .version file
      shell: bash
      id: version-file
      run: |
        if [ -f .version ]; then
          VERSION=$(cat .version)
          echo "FILE_VERSION=v${VERSION}" >> $GITHUB_ENV
        fi
      continue-on-error: true
 
    - name: Get latest tag
      shell: bash
      id: get-latest-tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        # Priority order: git tag > package.json > .version file > default
        if [ ! -z "$LATEST_TAG" ]; then
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        elif [ ! -z "$PACKAGE_VERSION" ]; then
          echo "LATEST_TAG=$PACKAGE_VERSION" >> $GITHUB_ENV
        elif [ ! -z "$FILE_VERSION" ]; then
          echo "LATEST_TAG=$FILE_VERSION" >> $GITHUB_ENV
        else
          echo "LATEST_TAG=v0.0.0" >> $GITHUB_ENV
        fi
 
    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi
 
    - name: Bump version
      if: env.BUMP != 'none'
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        case $BUMP in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
        esac
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
 
    - name: Extract release notes
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      id: extract-notes
      run: |
        VERSION="v$NEW_VERSION"
        CHANGELOG_FILE="${{ inputs.changelog_file }}"
        if [ -f "$CHANGELOG_FILE" ]; then
          # Extract content between current version header and next version header
          awk -v ver="$VERSION" '
            $0 ~ "^## \\[" ver "\\]" { p=1; next }
            /^## \[/ { if(p) exit }
            p { print }
          ' "$CHANGELOG_FILE" > release_notes.tmp
          # Remove empty lines from the beginning and end
          NOTES=$(cat release_notes.tmp | sed -e '/./,$!d' -e :a -e '/^\n*$/{$d;N;ba' -e '}')
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          rm release_notes.tmp
        else
          echo "Warning: Changelog file not found at $CHANGELOG_FILE"
          echo "RELEASE_NOTES=No changelog entry found for $VERSION" >> $GITHUB_ENV
        fi
 
    - name: Create and push tag
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin "v$NEW_VERSION"
 
    - name: Create Release
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          ${{ env.RELEASE_NOTES }}
          PR Details:
          - PR: #${{ github.event.pull_request.number }}
          - Title: ${{ github.event.pull_request.title }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ inputs.prerelease }}
