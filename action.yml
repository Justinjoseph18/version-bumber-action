name: 'Automatic Version Bumper'
description: 'Automatically bumps version, extracts release notes, and creates releases based on PR title conventions'

inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'

outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}
  release_notes:
    description: 'The extracted release notes'
    value: ${{ steps.bump-version.outputs.release_notes }}

runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        INITIAL_VERSION="${{ inputs.initial_version }}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi

    - name: Bump version and create tag
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
          patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          none) NEW_VERSION="${CURRENT_VERSION}" ;;
        esac
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        
        # Extract release notes from CHANGELOG.md
        if [ -f "CHANGELOG.md" ]; then
          # Use awk to extract the section for the new version
          RELEASE_NOTES=$(awk -v version="## [${NEW_VERSION}]" '
            BEGIN { found=0; buffer="" }
            $0 ~ version { found=1; next }
            found && /^## / { exit }
            found { buffer = buffer $0 "\n" }
            END { print buffer }
          ' CHANGELOG.md)
          
          # Escape newlines and special characters for GitHub Actions
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "release_notes=No CHANGELOG.md found" >> $GITHUB_OUTPUT
        fi
        
        if [ "$BUMP" != "none" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create an annotated tag with release notes
          if [ -n "$RELEASE_NOTES" ]; then
            git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}" -m "$RELEASE_NOTES"
          else
            git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          fi
          
          git push origin "v${NEW_VERSION}" --force
        fi
