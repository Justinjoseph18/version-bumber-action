name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'
outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}
runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        INITIAL_VERSION="${{ inputs.initial_version }}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        # Default to "none" for non-PR events
        BUMP="none"
        
        # Check PR title for version bump type
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          BUMP="major"
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          BUMP="minor"
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          BUMP="patch"
        fi
        
        echo "BUMP=${BUMP}" >> $GITHUB_ENV

    - name: Bump version and create tag
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        
        # Split version into major, minor, patch
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Calculate new version based on bump type
        case $BUMP in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
          none)
            NEW_VERSION="${CURRENT_VERSION}"
            ;;
        esac
        
        # Output the new version
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        
        # Extract release notes from CHANGELOG.md with all sections
        if [ -f "CHANGELOG.md" ]; then
          # Create a temporary file for release notes
          TEMP_NOTES=$(mktemp)
          
          # Initialize variables for section tracking
          FOUND_VERSION=false
          SECTION=""
          
          # Read CHANGELOG.md line by line
          while IFS= read -r line; do
            # Check for version header
            if [[ $line =~ ^"## ["${NEW_VERSION}"]" ]]; then
              FOUND_VERSION=true
              continue
            # Check for next version header to stop
            elif [[ $FOUND_VERSION == true && $line =~ ^"## [" ]]; then
              break
            # Process section headers and content
            elif [[ $FOUND_VERSION == true ]]; then
              if [[ $line =~ ^"### " ]]; then
                SECTION=${line}
                echo "$SECTION" >> "$TEMP_NOTES"
              elif [[ -n $line ]]; then
                echo "$line" >> "$TEMP_NOTES"
              fi
            fi
          done < "CHANGELOG.md"
          
          # Read the formatted release notes
          if [ -s "$TEMP_NOTES" ]; then
            RELEASE_NOTES=$(<"$TEMP_NOTES")
          else
            echo "Warning: No release notes found for version ${NEW_VERSION} in CHANGELOG.md"
            RELEASE_NOTES="Release ${NEW_VERSION}"
          fi
          
          # Clean up temporary file
          rm "$TEMP_NOTES"
        else
          echo "Warning: CHANGELOG.md not found"
          RELEASE_NOTES="Release ${NEW_VERSION}"
        fi
        
        # Create and push tag if version changed
        if [ "$BUMP" != "none" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag with release notes
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}" -m "${RELEASE_NOTES}"
          
          # Push the tag
          git push origin "v${NEW_VERSION}" --force
        fi
