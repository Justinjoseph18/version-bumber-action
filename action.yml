name: 'Automatic Version Bumper'
description: 'Automatically bumps version, updates changelog, and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
    default: ${{ github.token }}
  changelog_file:
    description: 'The path to the changelog file'
    required: false
    default: 'CHANGELOG.md'
  draft:
    description: 'Create release as draft'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'

outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.new_version }}
  release_notes:
    description: 'The extracted release notes'
    value: ${{ steps.extract-notes.outputs.release_notes }}

runs:
  using: 'composite'
  steps:
    - name: Get latest tag
      shell: bash
      id: get-latest-tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
        echo "Current latest tag: ${LATEST_TAG}"

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_OUTPUT
          echo "BUMP=major" >> $GITHUB_ENV
          echo "TYPE=Breaking" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_OUTPUT
          echo "BUMP=minor" >> $GITHUB_ENV
          echo "TYPE=Added" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_OUTPUT
          echo "BUMP=patch" >> $GITHUB_ENV
          echo "TYPE=Fixed" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_OUTPUT
          echo "BUMP=none" >> $GITHUB_ENV
          echo "TYPE=Changed" >> $GITHUB_ENV
        fi
        echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV

    - name: Bump version
      if: env.BUMP != 'none'
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
        esac
        
        if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
          echo "Tag v$NEW_VERSION already exists. Skipping version bump."
          exit 1
        fi
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Setup changelog handler
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        cat > changelog-handler.sh << 'EOL'
        #!/bin/bash
        
        update_changelog() {
            local CHANGELOG_FILE="$1"
            local NEW_VERSION="$2"
            local TYPE="$3"
            local PR_TITLE="$4"
            local PR_NUMBER="$5"
            local DATE="$(date +%Y-%m-%d)"
            
            if [ ! -f "$CHANGELOG_FILE" ]; then
                cat > "$CHANGELOG_FILE" << TEMPLATE
# Changelog
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

TEMPLATE
            fi

            NEW_ENTRY="## [v${NEW_VERSION}] - ${DATE}\n\n### ${TYPE}\n- ${PR_TITLE#*/: } (#${PR_NUMBER})\n"
            
            TEMP_FILE=$(mktemp)
            
            awk -v new_entry="$NEW_ENTRY" '
            BEGIN { found_unreleased = 0; printed_new_entry = 0 }
            
            /^## \[Unreleased\]/ {
                if (!found_unreleased) {
                    print
                    print ""
                    print new_entry
                    found_unreleased = 1
                    printed_new_entry = 1
                    next
                }
            }
            
            END {
                if (!found_unreleased) {
                    print "## [Unreleased]\n"
                    print new_entry
                }
            }
            
            { print }
            ' "$CHANGELOG_FILE" > "$TEMP_FILE"

            mv "$TEMP_FILE" "$CHANGELOG_FILE"
            
            if ! grep -q "## \[v${NEW_VERSION}\] - ${DATE}" "$CHANGELOG_FILE"; then
                echo "Error: Failed to update changelog properly"
                exit 1
            fi
        }

        extract_release_notes() {
            local CHANGELOG_FILE="$1"
            local VERSION="$2"
            
            awk -v ver="## [v${VERSION}]" '
            $0 ~ ver {
                p = 1
                next
            }
            /^## \[/ {
                if (p) exit
            }
            p && NF { 
                if (buffer) buffer = buffer "\n"
                buffer = buffer $0
            }
            END {
                print buffer
            }
            ' "$CHANGELOG_FILE"
        }
        EOL
        chmod +x changelog-handler.sh

    - name: Update CHANGELOG.md
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        source ./changelog-handler.sh
        
        update_changelog \
          "${{ inputs.changelog_file }}" \
          "${{ env.NEW_VERSION }}" \
          "${{ env.TYPE }}" \
          "${{ env.PR_TITLE }}" \
          "${{ github.event.pull_request.number }}"
        
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        git add "${{ inputs.changelog_file }}"
        git commit -m "docs: update changelog for v${{ env.NEW_VERSION }}"
        git push origin HEAD:${{ github.event.pull_request.base.ref }}

    - name: Extract release notes
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      id: extract-notes
      run: |
        source ./changelog-handler.sh
        
        RELEASE_NOTES=$(extract_release_notes "${{ inputs.changelog_file }}" "${{ env.NEW_VERSION }}")
        
        # Escape special characters for GitHub Actions
        RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        
        echo "release_notes=${RELEASE_NOTES}" >> $GITHUB_OUTPUT
        echo "RELEASE_NOTES=${RELEASE_NOTES}" >> $GITHUB_ENV

    - name: Create and push tag
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin "v$NEW_VERSION"

    - name: Create Release
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        # Create JSON payload for the release
        jq -n \
          --arg tag_name "v$NEW_VERSION" \
          --arg name "Release v$NEW_VERSION" \
          --arg body "$RELEASE_NOTES" \
          --argjson draft ${{ inputs.draft }} \
          --argjson prerelease ${{ inputs.prerelease }} \
          '{
            tag_name: $tag_name,
            name: $name,
            body: $body,
            draft: $draft,
            prerelease: $prerelease
          }' > release_payload.json
        
        # Create release using GitHub API
        curl \
          -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
          -d @release_payload.json
