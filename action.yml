name: 'Automatic Version Bumper'
description: 'Automatically bumps version, updates changelog, and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
    default: ${{ github.token }}
  changelog_file:
    description: 'The path to the changelog file'
    required: false
    default: 'CHANGELOG.md'
  draft:
    description: 'Create release as draft'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'

outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.new_version }}
  release_notes:
    description: 'The extracted release notes'
    value: ${{ steps.extract-notes.outputs.release_notes }}

runs:
  using: 'composite'
  steps:
    - name: Get latest tag
      shell: bash
      id: get-latest-tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
        echo "Current latest tag: ${LATEST_TAG}"

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_OUTPUT
          echo "BUMP=major" >> $GITHUB_ENV
          echo "TYPE=Breaking" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_OUTPUT
          echo "BUMP=minor" >> $GITHUB_ENV
          echo "TYPE=Added" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_OUTPUT
          echo "BUMP=patch" >> $GITHUB_ENV
          echo "TYPE=Fixed" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_OUTPUT
          echo "BUMP=none" >> $GITHUB_ENV
          echo "TYPE=Changed" >> $GITHUB_ENV
        fi
        echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV

    - name: Bump version
      if: env.BUMP != 'none'
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
        esac
        
        if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
          echo "Tag v$NEW_VERSION already exists. Skipping version bump."
          exit 1
        fi
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Update CHANGELOG.md
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        CHANGELOG_FILE="${{ inputs.changelog_file }}"
        DATE=$(date +%Y-%m-%d)
        
        # Create changelog if it doesn't exist
        if [ ! -f "$CHANGELOG_FILE" ]; then
          cat > "$CHANGELOG_FILE" << EOL
# Changelog
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

EOL
        fi
        
        # Prepare new version entry
        NEW_ENTRY="## [v${{ env.NEW_VERSION }}] - $DATE\n\n### ${TYPE}\n- ${PR_TITLE#*/: } (#${{ github.event.pull_request.number }})\n"
        
        # Add new version and move Unreleased content
        awk -v new_entry="$NEW_ENTRY" '
        /^## \[Unreleased\]/ {
          print
          print ""
          print new_entry
          next
        }
        { print }
        ' "$CHANGELOG_FILE" > temp_changelog
        mv temp_changelog "$CHANGELOG_FILE"
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Stage and commit changelog
        git add "$CHANGELOG_FILE"
        git commit -m "docs: update changelog for v${{ env.NEW_VERSION }}"
        git push origin HEAD:${{ github.event.pull_request.base.ref }}

    - name: Extract release notes
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      id: extract-notes
      run: |
        CHANGELOG_FILE="${{ inputs.changelog_file }}"
        VERSION_HEADER="## [v${{ env.NEW_VERSION }}]"
        
        # Extract release notes between version headers
        RELEASE_NOTES=$(awk -v ver="$VERSION_HEADER" '
          $0 ~ ver {p=1;next}
          /^## \[/ {p=0}
          p {print}
        ' "$CHANGELOG_FILE" | sed '/./,$!d' | sed '/^$/N;/^\n$/D')
        
        # Store release notes in output and env
        {
          echo "release_notes<<EOF"
          echo "$RELEASE_NOTES"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"
        
        {
          echo "RELEASE_NOTES<<EOF"
          echo "$RELEASE_NOTES"
          echo "EOF"
        } >> "$GITHUB_ENV"

    - name: Create and push tag
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin "v$NEW_VERSION"

    - name: Create Release
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: ${{ env.RELEASE_NOTES }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ inputs.prerelease }}
