name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'

inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'

outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        INITIAL_VERSION="${{ inputs.initial_version }}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV
    
    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi
    
    - name: Bump version and create tag
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        case $BUMP in
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
          patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          none) NEW_VERSION="${CURRENT_VERSION}" ;;
        esac

        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

        if [ "$BUMP" != "none" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Extract release notes from CHANGE_LOG.md
          RELEASE_NOTES=$(awk -v version="## v${NEW_VERSION}" '/^## / {flag=0} $0 ~ version {flag=1} flag' CHANGE_LOG.md | tail -n +2)

          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="No specific release notes found for v${NEW_VERSION}."
          fi
          
          RELEASE_TITLE="v${NEW_VERSION}"
          
          echo "Release Notes for ${RELEASE_TITLE}:"
          echo "$RELEASE_NOTES"
          
          git tag -a "${RELEASE_TITLE}" -m "${RELEASE_TITLE}\n\n${RELEASE_NOTES}"
          git push origin "${RELEASE_TITLE}"
        fi
