name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions and CHANGELOG.md'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
    default: ${{ github.token }}
  draft:
    description: 'Create release as draft'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
 
runs:
  using: 'composite'
  steps:
    - name: Get version from package.json
      shell: bash
      id: package-version
      run: |
        if [ -f package.json ]; then
          VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=v${VERSION}" >> $GITHUB_ENV
        fi
      continue-on-error: true
 
    - name: Get version from .version file
      shell: bash
      id: version-file
      run: |
        if [ -f .version ]; then
          VERSION=$(cat .version)
          echo "FILE_VERSION=v${VERSION}" >> $GITHUB_ENV
        fi
      continue-on-error: true
 
    - name: Get latest tag
      shell: bash
      id: get-latest-tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        # Priority order: git tag > package.json > .version file > default
        if [ ! -z "$LATEST_TAG" ]; then
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        elif [ ! -z "$PACKAGE_VERSION" ]; then
          echo "LATEST_TAG=$PACKAGE_VERSION" >> $GITHUB_ENV
        elif [ ! -z "$FILE_VERSION" ]; then
          echo "LATEST_TAG=$FILE_VERSION" >> $GITHUB_ENV
        else
          echo "LATEST_TAG=v0.0.0" >> $GITHUB_ENV
        fi
 
    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        # First check for breaking changes
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        # Then check for features
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        # Then check for fixes
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi
        # Debug output
        echo "PR Title: $PR_TITLE"
        echo "Bump Type: $BUMP"
 
    - name: Bump version
      if: env.BUMP != 'none'
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        case $BUMP in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
        esac
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: v$NEW_VERSION"

    - name: Extract release notes
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      id: extract-notes
      run: |
        if [ -f CHANGELOG.md ]; then
          # Try to find the section for the new version
          VERSION_PATTERN="^## \[?v?$NEW_VERSION\]?"
          START_LINE=$(grep -n "$VERSION_PATTERN" CHANGELOG.md | cut -d: -f1)
          
          if [ ! -z "$START_LINE" ]; then
            # Find the next version header or EOF
            NEXT_VERSION_LINE=$(tail -n +$((START_LINE + 1)) CHANGELOG.md | grep -n "^## \[" | head -n 1 | cut -d: -f1)
            
            if [ ! -z "$NEXT_VERSION_LINE" ]; then
              # If we found another version header, extract content between them
              END_LINE=$((START_LINE + NEXT_VERSION_LINE - 1))
              RELEASE_NOTES=$(sed -n "${START_LINE},${END_LINE}p" CHANGELOG.md)
            else
              # If no next version found, extract until the end
              RELEASE_NOTES=$(tail -n +${START_LINE} CHANGELOG.md)
            fi
            
            # Save release notes to a temporary file to preserve formatting
            echo "$RELEASE_NOTES" > release_notes.tmp
            echo "RELEASE_NOTES_PATH=release_notes.tmp" >> $GITHUB_ENV
          else
            echo "No matching version found in CHANGELOG.md"
            echo "## Release v$NEW_VERSION" > release_notes.tmp
            echo "" >> release_notes.tmp
            echo "Changes in this Release" >> release_notes.tmp
            echo "- PR: #${{ github.event.pull_request.number }}" >> release_notes.tmp
            echo "- Title: ${{ github.event.pull_request.title }}" >> release_notes.tmp
            echo "RELEASE_NOTES_PATH=release_notes.tmp" >> $GITHUB_ENV
          fi
        else
          echo "CHANGELOG.md not found, using default release notes"
          echo "## Release v$NEW_VERSION" > release_notes.tmp
          echo "" >> release_notes.tmp
          echo "Changes in this Release" >> release_notes.tmp
          echo "- PR: #${{ github.event.pull_request.number }}" >> release_notes.tmp
          echo "- Title: ${{ github.event.pull_request.title }}" >> release_notes.tmp
          echo "RELEASE_NOTES_PATH=release_notes.tmp" >> $GITHUB_ENV
        fi
 
    - name: Create and push tag
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin "v$NEW_VERSION"
 
    - name: Create Release
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body_path: ${{ env.RELEASE_NOTES_PATH }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ inputs.prerelease }}
