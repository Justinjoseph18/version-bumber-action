name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'

inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'

outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        INITIAL_VERSION="${{ inputs.initial_version }}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi

    - name: Bump version and create tag
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
          patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          none) NEW_VERSION="${CURRENT_VERSION}" ;;
        esac
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Extract Release Notes
      shell: bash
      id: release-notes
      run: |
        TAG="${{ steps.bump-version.outputs.version }}"  # This is just the version number

        # Extract release notes from CHANGE_LOG.md
        RELEASE_NOTES=$(awk '/^## '"$TAG"'/ {flag=1; next} /^## / {flag=0} flag' CHANGE_LOG.md)

        # Store properly formatted release notes
        echo -e "## v$TAG\n\n$RELEASE_NOTES" > RELEASE_NOTES.txt

        # Save release notes to an environment variable
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo -e "## v$TAG\n\n$RELEASE_NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Commit and push tag
      shell: bash
      run: |
        if [ "$BUMP" != "none" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          TAG="${{ steps.bump-version.outputs.version }}"  # Just the version number
          
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
        fi

    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.bump-version.outputs.version }}
        release_name: v${{ steps.bump-version.outputs.version }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
