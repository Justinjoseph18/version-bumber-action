name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'

inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'

outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        echo "INITIAL_VERSION=${{ inputs.initial_version }}" >> $GITHUB_ENV

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi

    - name: Bump version and create tag
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
          patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          none) NEW_VERSION="${CURRENT_VERSION}" ;;
        esac
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Extract Release Notes
      shell: bash
      id: release-notes
      run: |
        VERSION="v${{ steps.bump-version.outputs.version }}"
        RELEASE_NOTES=$(awk -v version="$VERSION" '
          BEGIN { flag=0 }
          /^##[[:space:]]*v[0-9]+\.[0-9]+\.[0-9]+/ {
            if (flag) exit;
            if ($0 ~ version) { flag=1; next }
          }
          flag { print }
        ' CHANGE_LOG.md)

        # Ensure proper multi-line formatting
        {
          echo "RELEASE_NOTES<<EOF"
          echo "## $VERSION"
          echo ""
          echo "$RELEASE_NOTES"
          echo "EOF"
        } >> $GITHUB_ENV

    - name: Commit and push tag
      shell: bash
      run: |
        if [ "$BUMP" != "none" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          TAG="v${{ steps.bump-version.outputs.version }}"

          # Store the release notes in a file for tagging
          echo -e "${{ env.RELEASE_NOTES }}" > RELEASE_NOTES.txt

          # Ensure the tag message has proper markdown formatting
          git tag -a "$TAG" -F RELEASE_NOTES.txt
          git push origin "$TAG"
        fi
