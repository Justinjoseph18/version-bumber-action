name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'

inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
  changelog_file:
    description: 'Path to the CHANGELOG file'
    required: false
    default: 'CHANGELOG.md'
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'

outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        INITIAL_VERSION="${{ inputs.initial_version }}"
        echo "INITIAL_VERSION=${INITIAL_VERSION}" >> $GITHUB_ENV

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi

    - name: Bump version and create tag
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
          patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
          none) NEW_VERSION="${CURRENT_VERSION}" ;;
        esac
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Extract Release Notes
      shell: bash
      id: release-notes
      run: |
        VERSION="v${{ steps.bump-version.outputs.version }}"
        CHANGELOG_FILE="${{ inputs.changelog_file }}"
        
        if [ ! -f "$CHANGELOG_FILE" ]; then
          echo "Changelog file not found!"
          exit 1
        fi

        START_LINE=$(grep -n "^## ${VERSION}" "$CHANGELOG_FILE" | cut -d ':' -f 1)
        if [[ -z "$START_LINE" ]]; then
          echo "No release notes found for ${VERSION}"
          exit 1
        fi

        TAIL_START=$((START_LINE + 1))
        RELEASE_NOTES=$(tail -n +$TAIL_START "$CHANGELOG_FILE" | awk '/^## /{exit} {print}')

        # Ensure a blank line after the version header
        CLEAN_NOTES=$(echo "$RELEASE_NOTES" | sed '/./,$!d')

        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "## ${VERSION}" >> $GITHUB_ENV
        echo "" >> $GITHUB_ENV
        echo "$CLEAN_NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Commit and push tag
      shell: bash
      run: |
        if [ "$BUMP" != "none" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          TAG="v${{ steps.bump-version.outputs.version }}"

          # Store the release notes in a file for tagging
          echo -e "${{ env.RELEASE_NOTES }}" > RELEASE_NOTES.txt

          # Ensure proper markdown formatting
          git tag -a "$TAG" -F RELEASE_NOTES.txt
          git push origin "$TAG" --force
        fi
