name: Automatic Version Bumper

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  version-bump:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set current version
      id: set-version
      env:
        INITIAL_VERSION: ${{ secrets.INITIAL_VERSION }}
      shell: bash
      run: |
        # Log inputs for debugging
        echo "Initial version from secret: $INITIAL_VERSION"
        
        # Fetch all tags
        git fetch --tags --force
        
        # Determine current version
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          echo "Using initial version from secret: $INITIAL_VERSION"
          CURRENT_VERSION=$INITIAL_VERSION
        else
          # Remove 'v' prefix if it exists
          CURRENT_VERSION=${LATEST_TAG#v}
        fi
        
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "Selected current version: $CURRENT_VERSION"

    - name: Determine version bump
      shell: bash
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "Processing PR title: $PR_TITLE"
        
        # First check for breaking changes
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
          echo "Determined MAJOR version bump"
        # Then check for features
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
          echo "Determined MINOR version bump"
        # Then check for fixes
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
          echo "Determined PATCH version bump"
        else
          echo "BUMP=none" >> $GITHUB_ENV
          echo "No version bump needed"
        fi

    - name: Calculate new version
      if: env.BUMP != 'none'
      shell: bash
      run: |
        echo "Starting version: $CURRENT_VERSION"
        
        # Split version into major, minor, patch
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        echo "Current parts - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
        
        # Calculate new version
        case $BUMP in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
        esac
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Calculated new version: $NEW_VERSION"

    - name: Create and push tag
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        echo "Creating new tag v$NEW_VERSION..."
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        echo "Pushing tag to repository..."
        git push origin "v$NEW_VERSION" --force

    - name: Update Initial Version Secret
      env:
        GH_TOKEN: ${{ github.token }}
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        # Use GitHub CLI to update the initial version secret
        gh secret set INITIAL_VERSION \
          --body "$NEW_VERSION" \
          --repos "${{ github.repository }}"
        
        echo "Updated INITIAL_VERSION secret to $NEW_VERSION"

    - name: Create GitHub Release
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      env:
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        gh release create "v$NEW_VERSION" \
          --title "Release v$NEW_VERSION" \
          --notes "Automated release for version $NEW_VERSION" \
          --verify-tag
