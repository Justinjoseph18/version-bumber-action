name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases and updating secrets'
    required: true
  initial_version:
    description: 'Initial version to start from (from secrets)'
    required: true
  force_initial:
    description: 'Force use of initial version regardless of existing tags'
    required: false
    default: 'true'
  draft:
    description: 'Create release as draft'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
outputs:
  new_version:
    description: 'The new version number'
    value: ${{ env.NEW_VERSION }}

runs:
  using: 'composite'
  steps:
    - name: Set current version
      shell: bash
      id: set-version
      run: |
        # Log inputs for debugging
        echo "Initial version from input: ${{ inputs.initial_version }}"
        echo "Force initial: ${{ inputs.force_initial }}"
        
        # Check if we should force initial version
        if [[ "${{ inputs.force_initial }}" == "true" ]]; then
          echo "Forcing use of initial version: ${{ inputs.initial_version }}"
          echo "CURRENT_VERSION=${{ inputs.initial_version }}" >> $GITHUB_ENV
        else
          # Try to get existing version from git tags
          git fetch --tags --force
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tags found, using initial version: ${{ inputs.initial_version }}"
            echo "CURRENT_VERSION=${{ inputs.initial_version }}" >> $GITHUB_ENV
          else
            # Remove 'v' prefix if it exists
            CURRENT_VERSION=${LATEST_TAG#v}
            echo "Using existing version: $CURRENT_VERSION"
            echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          fi
        fi
        
        echo "Selected current version: $CURRENT_VERSION"

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "Processing PR title: $PR_TITLE"
        
        # First check for breaking changes
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
          echo "Determined MAJOR version bump"
        # Then check for features
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
          echo "Determined MINOR version bump"
        # Then check for fixes
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
          echo "Determined PATCH version bump"
        else
          echo "BUMP=none" >> $GITHUB_ENV
          echo "No version bump needed"
        fi

    - name: Calculate new version
      if: env.BUMP != 'none'
      shell: bash
      id: calc-version
      run: |
        echo "Starting version: $CURRENT_VERSION"
        
        # Split version into major, minor, patch
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        echo "Current parts - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
        
        # Calculate new version
        case $BUMP in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            ;;
        esac
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Calculated new version: $NEW_VERSION"

    - name: Create and push tag
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        echo "Creating new tag v$NEW_VERSION..."
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        echo "Pushing tag to repository..."
        git push origin "v$NEW_VERSION" --force

    - name: Update version in repository secrets
      if: env.BUMP != 'none' && env.NEW_VERSION != ''
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        # Update the version in repository secrets
        # This uses GitHub CLI to update the initial_version secret
        gh secret set INITIAL_VERSION "$NEW_VERSION" \
          --repo ${{ github.repository }} \
          --body "$NEW_VERSION"
        
        echo "Updated INITIAL_VERSION secret to $NEW_VERSION"
