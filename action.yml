# # action.yml
# name: 'Automatic Version Bumper'
# description: 'Automatically bumps version and creates releases based on PR title conventions'
# # inputs:
# #   token:
# #     description: 'GitHub token for creating releases'
# #     required: true
# #     default: ${{ github.token }}
# #   draft:
# #     description: 'Create release as draft'
# #     required: false
# #     default: 'false'
# #   prerelease:
# #     description: 'Mark as prerelease'
# #     required: false
# #     default: 'false'
 
# runs:
#   using: 'composite'
#   steps:
#     - name: Get version from package.json
#       shell: bash
#       id: package-version
#       run: |
#         if [ -f package.json ]; then
#           VERSION=$(node -p "require('./package.json').version")
#           echo "PACKAGE_VERSION=v${VERSION}" >> $GITHUB_ENV
#         fi
#       continue-on-error: true
 
#     - name: Get version from .version file
#       shell: bash
#       id: version-file
#       run: |
#         if [ -f .version ]; then
#           VERSION=$(cat .version)
#           echo "FILE_VERSION=v${VERSION}" >> $GITHUB_ENV
#         fi
#       continue-on-error: true
 
#     - name: Get latest tag
#       shell: bash
#       id: get-latest-tag
#       run: |
#         git fetch --tags
#         LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
#         # Priority order: git tag > package.json > .version file > default
#         if [ ! -z "$LATEST_TAG" ]; then
#           echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
#         elif [ ! -z "$PACKAGE_VERSION" ]; then
#           echo "LATEST_TAG=$PACKAGE_VERSION" >> $GITHUB_ENV
#         elif [ ! -z "$FILE_VERSION" ]; then
#           echo "LATEST_TAG=$FILE_VERSION" >> $GITHUB_ENV
#         else
#           echo "LATEST_TAG=v0.0.0" >> $GITHUB_ENV
#         fi
 
#     - name: Determine version bump
#       shell: bash
#       id: version-bump
#       run: |
#         PR_TITLE="${{ github.event.pull_request.title }}"
#         # First check for breaking changes
#         if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
#           echo "BUMP=major" >> $GITHUB_ENV
#         # Then check for features
#         elif [[ $PR_TITLE =~ ^feat: ]]; then
#           echo "BUMP=minor" >> $GITHUB_ENV
#         # Then check for fixes
#         elif [[ $PR_TITLE =~ ^fix: ]]; then
#           echo "BUMP=patch" >> $GITHUB_ENV
#         else
#           echo "BUMP=none" >> $GITHUB_ENV
#         fi
#         # Debug output
#         echo "PR Title: $PR_TITLE"
#         echo "Bump Type: $BUMP"
 
#     - name: Bump version
#       if: env.BUMP != 'none'
#       shell: bash
#       id: bump-version
#       run: |
#         CURRENT_VERSION=${LATEST_TAG#v}
#         IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
#         case $BUMP in
#           major)
#             NEW_VERSION="$((MAJOR + 1)).0.0"
#             ;;
#           minor)
#             NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
#             ;;
#           patch)
#             NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
#             ;;
#         esac
#         echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
 
