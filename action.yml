name: 'Automatic Version Bumper'
description: 'Automatically bumps version and creates releases based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for creating releases'
    required: true
    default: ${{ github.token }}
  initial_version:
    description: 'Initial version if no tag exists'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'
outputs:
  new_version:
    description: 'The new version number'
    value: ${{ env.NEW_VERSION }}

runs:
  using: 'composite'
  steps:
    - name: Get latest tag or use initial version
      shell: bash
      id: get-latest-tag
      run: |
        git fetch --tags --force
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        if [[ -z "$LATEST_TAG" || "${{ inputs.force_initial }}" == "true" ]]; then
          LATEST_TAG="v${{ inputs.initial_version }}"
        fi

        echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
        echo "Current latest tag: $LATEST_TAG"

    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "Processing PR title: $PR_TITLE"

        if [[ "$PR_TITLE" =~ feat! ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
        elif [[ "$PR_TITLE" =~ feat ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
        elif [[ "$PR_TITLE" =~ fix ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
        else
          echo "BUMP=none" >> $GITHUB_ENV
        fi

        echo "Determined bump type: $BUMP"

    - name: Bump version and create tag
      if: env.BUMP != 'none'
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        case $BUMP in
          major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
          minor) NEW_VERSION="${MAJOR}.$((MINOR + 1)).0" ;;
          patch) NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))" ;;
        esac

        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Calculated new version: v$NEW_VERSION"

        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin refs/tags/v$NEW_VERSION --force
